// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/fajarabdillahfn/go-movie-api/internal/model"
	"sync"
)

// Ensure, that UseCaseMock does implement UseCase.
// If this is not the case, regenerate this file with moq.
var _ UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateMovieFunc: func(ctx context.Context, newMovie *model.Movie) (model.Movie, error) {
// 				panic("mock out the CreateMovie method")
// 			},
// 			DeleteMovieByIdFunc: func(ctx context.Context, id uint) error {
// 				panic("mock out the DeleteMovieById method")
// 			},
// 			GetAllMoviesFunc: func(ctx context.Context) ([]*model.Movie, error) {
// 				panic("mock out the GetAllMovies method")
// 			},
// 			GetMovieByIdFunc: func(ctx context.Context, id uint) (*model.Movie, error) {
// 				panic("mock out the GetMovieById method")
// 			},
// 			UpdateMovieFunc: func(ctx context.Context, id uint, updateMovie *model.InputMovie) error {
// 				panic("mock out the UpdateMovie method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateMovieFunc mocks the CreateMovie method.
	CreateMovieFunc func(ctx context.Context, newMovie *model.Movie) (model.Movie, error)

	// DeleteMovieByIdFunc mocks the DeleteMovieById method.
	DeleteMovieByIdFunc func(ctx context.Context, id uint) error

	// GetAllMoviesFunc mocks the GetAllMovies method.
	GetAllMoviesFunc func(ctx context.Context) ([]*model.Movie, error)

	// GetMovieByIdFunc mocks the GetMovieById method.
	GetMovieByIdFunc func(ctx context.Context, id uint) (*model.Movie, error)

	// UpdateMovieFunc mocks the UpdateMovie method.
	UpdateMovieFunc func(ctx context.Context, id uint, updateMovie *model.InputMovie) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateMovie holds details about calls to the CreateMovie method.
		CreateMovie []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NewMovie is the newMovie argument value.
			NewMovie *model.Movie
		}
		// DeleteMovieById holds details about calls to the DeleteMovieById method.
		DeleteMovieById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetAllMovies holds details about calls to the GetAllMovies method.
		GetAllMovies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetMovieById holds details about calls to the GetMovieById method.
		GetMovieById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// UpdateMovie holds details about calls to the UpdateMovie method.
		UpdateMovie []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
			// UpdateMovie is the updateMovie argument value.
			UpdateMovie *model.InputMovie
		}
	}
	lockCreateMovie     sync.RWMutex
	lockDeleteMovieById sync.RWMutex
	lockGetAllMovies    sync.RWMutex
	lockGetMovieById    sync.RWMutex
	lockUpdateMovie     sync.RWMutex
}

// CreateMovie calls CreateMovieFunc.
func (mock *UseCaseMock) CreateMovie(ctx context.Context, newMovie *model.Movie) (model.Movie, error) {
	if mock.CreateMovieFunc == nil {
		panic("UseCaseMock.CreateMovieFunc: method is nil but UseCase.CreateMovie was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		NewMovie *model.Movie
	}{
		Ctx:      ctx,
		NewMovie: newMovie,
	}
	mock.lockCreateMovie.Lock()
	mock.calls.CreateMovie = append(mock.calls.CreateMovie, callInfo)
	mock.lockCreateMovie.Unlock()
	return mock.CreateMovieFunc(ctx, newMovie)
}

// CreateMovieCalls gets all the calls that were made to CreateMovie.
// Check the length with:
//     len(mockedUseCase.CreateMovieCalls())
func (mock *UseCaseMock) CreateMovieCalls() []struct {
	Ctx      context.Context
	NewMovie *model.Movie
} {
	var calls []struct {
		Ctx      context.Context
		NewMovie *model.Movie
	}
	mock.lockCreateMovie.RLock()
	calls = mock.calls.CreateMovie
	mock.lockCreateMovie.RUnlock()
	return calls
}

// DeleteMovieById calls DeleteMovieByIdFunc.
func (mock *UseCaseMock) DeleteMovieById(ctx context.Context, id uint) error {
	if mock.DeleteMovieByIdFunc == nil {
		panic("UseCaseMock.DeleteMovieByIdFunc: method is nil but UseCase.DeleteMovieById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteMovieById.Lock()
	mock.calls.DeleteMovieById = append(mock.calls.DeleteMovieById, callInfo)
	mock.lockDeleteMovieById.Unlock()
	return mock.DeleteMovieByIdFunc(ctx, id)
}

// DeleteMovieByIdCalls gets all the calls that were made to DeleteMovieById.
// Check the length with:
//     len(mockedUseCase.DeleteMovieByIdCalls())
func (mock *UseCaseMock) DeleteMovieByIdCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDeleteMovieById.RLock()
	calls = mock.calls.DeleteMovieById
	mock.lockDeleteMovieById.RUnlock()
	return calls
}

// GetAllMovies calls GetAllMoviesFunc.
func (mock *UseCaseMock) GetAllMovies(ctx context.Context) ([]*model.Movie, error) {
	if mock.GetAllMoviesFunc == nil {
		panic("UseCaseMock.GetAllMoviesFunc: method is nil but UseCase.GetAllMovies was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllMovies.Lock()
	mock.calls.GetAllMovies = append(mock.calls.GetAllMovies, callInfo)
	mock.lockGetAllMovies.Unlock()
	return mock.GetAllMoviesFunc(ctx)
}

// GetAllMoviesCalls gets all the calls that were made to GetAllMovies.
// Check the length with:
//     len(mockedUseCase.GetAllMoviesCalls())
func (mock *UseCaseMock) GetAllMoviesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllMovies.RLock()
	calls = mock.calls.GetAllMovies
	mock.lockGetAllMovies.RUnlock()
	return calls
}

// GetMovieById calls GetMovieByIdFunc.
func (mock *UseCaseMock) GetMovieById(ctx context.Context, id uint) (*model.Movie, error) {
	if mock.GetMovieByIdFunc == nil {
		panic("UseCaseMock.GetMovieByIdFunc: method is nil but UseCase.GetMovieById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetMovieById.Lock()
	mock.calls.GetMovieById = append(mock.calls.GetMovieById, callInfo)
	mock.lockGetMovieById.Unlock()
	return mock.GetMovieByIdFunc(ctx, id)
}

// GetMovieByIdCalls gets all the calls that were made to GetMovieById.
// Check the length with:
//     len(mockedUseCase.GetMovieByIdCalls())
func (mock *UseCaseMock) GetMovieByIdCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGetMovieById.RLock()
	calls = mock.calls.GetMovieById
	mock.lockGetMovieById.RUnlock()
	return calls
}

// UpdateMovie calls UpdateMovieFunc.
func (mock *UseCaseMock) UpdateMovie(ctx context.Context, id uint, updateMovie *model.InputMovie) error {
	if mock.UpdateMovieFunc == nil {
		panic("UseCaseMock.UpdateMovieFunc: method is nil but UseCase.UpdateMovie was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uint
		UpdateMovie *model.InputMovie
	}{
		Ctx:         ctx,
		ID:          id,
		UpdateMovie: updateMovie,
	}
	mock.lockUpdateMovie.Lock()
	mock.calls.UpdateMovie = append(mock.calls.UpdateMovie, callInfo)
	mock.lockUpdateMovie.Unlock()
	return mock.UpdateMovieFunc(ctx, id, updateMovie)
}

// UpdateMovieCalls gets all the calls that were made to UpdateMovie.
// Check the length with:
//     len(mockedUseCase.UpdateMovieCalls())
func (mock *UseCaseMock) UpdateMovieCalls() []struct {
	Ctx         context.Context
	ID          uint
	UpdateMovie *model.InputMovie
} {
	var calls []struct {
		Ctx         context.Context
		ID          uint
		UpdateMovie *model.InputMovie
	}
	mock.lockUpdateMovie.RLock()
	calls = mock.calls.UpdateMovie
	mock.lockUpdateMovie.RUnlock()
	return calls
}
