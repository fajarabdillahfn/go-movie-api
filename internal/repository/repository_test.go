// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/fajarabdillahfn/go-movie-api/internal/model"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateFunc: func(ctx context.Context, newMovie *model.Movie) (model.Movie, error) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, id uint) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetAllFunc: func(ctx context.Context) ([]*model.Movie, error) {
// 				panic("mock out the GetAll method")
// 			},
// 			GetByIdFunc: func(ctx context.Context, id uint) (*model.Movie, error) {
// 				panic("mock out the GetById method")
// 			},
// 			UpdateFunc: func(ctx context.Context, id uint, updateDetails map[string]interface{}) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, newMovie *model.Movie) (model.Movie, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uint) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]*model.Movie, error)

	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(ctx context.Context, id uint) (*model.Movie, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uint, updateDetails map[string]interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NewMovie is the newMovie argument value.
			NewMovie *model.Movie
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
			// UpdateDetails is the updateDetails argument value.
			UpdateDetails map[string]interface{}
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetById sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, newMovie *model.Movie) (model.Movie, error) {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		NewMovie *model.Movie
	}{
		Ctx:      ctx,
		NewMovie: newMovie,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, newMovie)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx      context.Context
	NewMovie *model.Movie
} {
	var calls []struct {
		Ctx      context.Context
		NewMovie *model.Movie
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock) Delete(ctx context.Context, id uint) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryMock.DeleteFunc: method is nil but Repository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *RepositoryMock) GetAll(ctx context.Context) ([]*model.Movie, error) {
	if mock.GetAllFunc == nil {
		panic("RepositoryMock.GetAllFunc: method is nil but Repository.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedRepository.GetAllCalls())
func (mock *RepositoryMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetById calls GetByIdFunc.
func (mock *RepositoryMock) GetById(ctx context.Context, id uint) (*model.Movie, error) {
	if mock.GetByIdFunc == nil {
		panic("RepositoryMock.GetByIdFunc: method is nil but Repository.GetById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(ctx, id)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//     len(mockedRepository.GetByIdCalls())
func (mock *RepositoryMock) GetByIdCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(ctx context.Context, id uint, updateDetails map[string]interface{}) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ID            uint
		UpdateDetails map[string]interface{}
	}{
		Ctx:           ctx,
		ID:            id,
		UpdateDetails: updateDetails,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, updateDetails)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	Ctx           context.Context
	ID            uint
	UpdateDetails map[string]interface{}
} {
	var calls []struct {
		Ctx           context.Context
		ID            uint
		UpdateDetails map[string]interface{}
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
